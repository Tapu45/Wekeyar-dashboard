generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id         Int      @id @default(autoincrement())
  name       String
  phone      String   @unique
  address    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isCashlist Boolean  @default(false)
  bills      Bill[]
}

model Store {
  id        Int      @id @default(autoincrement())
  storeName String   @unique
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String?
  phone     String?
  bills     Bill[]
}

model Bill {
  id           Int           @id @default(autoincrement())
  billNo       String        
  year         Int?          // Optional to not conflict with existing data
  customerId   Int
  storeId      Int
  date         DateTime      @default(now())
  netDiscount  Float
  netAmount    Float
  isUploaded   Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  amountPaid   Float
  creditAmount Float
  paymentType  String
  customer     Customer      @relation(fields: [customerId], references: [id])
  store        Store         @relation(fields: [storeId], references: [id])
  billDetails  BillDetails[]

  @@unique([billNo, storeId, year])  // Updated composite unique constraint with year
}

model BillDetails {
  id        Int      @id @default(autoincrement())
  billId    Int
  item      String
  quantity  Int
  batch     String
  mrp       Float
  discount  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expBatch  String
  bill      Bill     @relation(fields: [billId], references: [id])
}

model UploadHistory {
  id         Int      @id @default(autoincrement())
  fileName   String
  uploadDate DateTime @default(now())
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  fileUrl    String?
}

model User {
  id                Int                         @id @default(autoincrement())
  username          String                      @unique
  email             String                      @unique
  password          String
  role              String
  createdAt         DateTime                    @default(now())
  updatedAt         DateTime                    @updatedAt
  handledCustomers  TelecallerHandledCustomer[]
  telecallingOrders TelecallingOrder[]
}

model TelecallingCustomer {
  id               Int                         @id @default(autoincrement())
  customerId       Int                         @unique
  customerName     String
  customerPhone    String
  storeName        String?
  lastPurchaseDate DateTime?
  remarks          String?
  status           String                      @default("not send")
  createdAt        DateTime                    @default(now())
  updatedAt        DateTime                    @updatedAt
  address          String?
  handledBy        TelecallerHandledCustomer[]
  orders           TelecallingOrder[]
}

model TelecallingOrder {
  id                    Int                       @id @default(autoincrement())
  telecallingCustomerId Int
  telecallerId          Int
  orderDate             DateTime                  @default(now())
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  telecaller            User                      @relation(fields: [telecallerId], references: [id])
  telecallingCustomer   TelecallingCustomer       @relation(fields: [telecallingCustomerId], references: [id])
  orderDetails          TelecallingOrderDetails[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TelecallingOrderDetails {
  id                 Int              @id @default(autoincrement())
  telecallingOrderId Int
  productName        String
  quantity           Int
  isNewProduct       Boolean          @default(false)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  telecallingOrder   TelecallingOrder @relation(fields: [telecallingOrderId], references: [id])
}

model TelecallerHandledCustomer {
  id           Int                 @id @default(autoincrement())
  telecallerId Int
  customerId   Int
  handledAt    DateTime            @default(now())
  customer     TelecallingCustomer @relation(fields: [customerId], references: [id])
  telecaller   User                @relation(fields: [telecallerId], references: [id])
}

model TelecallingNewCustomer {
  id            Int      @id @default(autoincrement())
  customerId    Int      @unique
  storeName     String
  customerName  String
  customerPhone String   @unique
  address       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
